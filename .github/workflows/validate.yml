name: Validate Crypto Ecosystems

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily at 2 AM UTC to check for broken links
    - cron: '0 2 * * *'

jobs:
  validate-migrations:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.11.0

    - name: Build project
      run: zig build

    - name: Run tests
      run: zig build test

    - name: Validate migration files
      run: |
        echo "Checking migration file naming convention..."
        for file in migrations/*; do
          if [[ -f "$file" ]]; then
            basename=$(basename "$file")
            # Check if filename matches YYYY-MM-DDThhmmss_description format
            if [[ ! "$basename" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{6}_.+ ]]; then
              echo "❌ Invalid migration filename: $basename"
              echo "Expected format: YYYY-MM-DDThhmmss_description"
              exit 1
            fi
          fi
        done
        echo "✅ All migration files follow naming convention"

    - name: Export ecosystems
      run: |
        ./run.sh export test_output.jsonl
        if [ ! -f test_output.jsonl ]; then
          echo "❌ Export failed - no output file generated"
          exit 1
        fi
        echo "✅ Export successful"
        
    - name: Validate JSON output
      run: |
        echo "Validating JSONL output..."
        line_count=0
        while IFS= read -r line; do
          line_count=$((line_count + 1))
          if ! echo "$line" | jq empty 2>/dev/null; then
            echo "❌ Invalid JSON at line $line_count: $line"
            exit 1
          fi
        done < test_output.jsonl
        echo "✅ All $line_count lines are valid JSON"

    - name: Check for duplicate repositories
      run: |
        echo "Checking for duplicate repository URLs..."
        duplicates=$(jq -r '.repo_url' test_output.jsonl | sort | uniq -d)
        if [ ! -z "$duplicates" ]; then
          echo "❌ Duplicate repositories found:"
          echo "$duplicates"
          exit 1
        fi
        echo "✅ No duplicate repositories found"

    - name: Generate statistics
      run: |
        echo "📊 Ecosystem Statistics:"
        echo "========================"
        total_repos=$(jq -s 'length' test_output.jsonl)
        total_ecosystems=$(jq -r '.eco_name' test_output.jsonl | sort -u | wc -l)
        echo "Total Ecosystems: $total_ecosystems"
        echo "Total Repositories: $total_repos"
        echo ""
        echo "Top 10 Ecosystems by Repository Count:"
        jq -r '.eco_name' test_output.jsonl | sort | uniq -c | sort -rn | head -10

    - name: Upload export artifact
      uses: actions/upload-artifact@v4
      with:
        name: ecosystem-export
        path: test_output.jsonl
        retention-days: 30

  check-links:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.11.0

    - name: Build and export
      run: |
        zig build
        ./run.sh export repos.jsonl

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Check repository accessibility
      run: |
        echo "Checking repository URLs..."
        broken_links=()
        checked=0
        
        while IFS= read -r line; do
          url=$(echo "$line" | jq -r '.repo_url')
          checked=$((checked + 1))
          
          # Rate limit: check every 2 seconds
          if [ $((checked % 10)) -eq 0 ]; then
            echo "Checked $checked repositories..."
            sleep 2
          fi
          
          # Check if URL is accessible (HTTP 200 or 301/302 redirect)
          status=$(curl -o /dev/null -s -w "%{http_code}" -L "$url" --max-time 10)
          
          if [ "$status" != "200" ] && [ "$status" != "301" ] && [ "$status" != "302" ]; then
            broken_links+=("$url (HTTP $status)")
          fi
        done < repos.jsonl
        
        if [ ${#broken_links[@]} -gt 0 ]; then
          echo "⚠️ Found ${#broken_links[@]} potentially broken links:"
          printf '%s\n' "${broken_links[@]}"
          # Don't fail the build, just warn
          exit 0
        else
          echo "✅ All $checked repository URLs are accessible"
        fi

  lint-migrations:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check migration syntax
      run: |
        echo "Linting migration files..."
        errors=0
        
        for file in migrations/*; do
          if [[ -f "$file" ]]; then
            echo "Checking $file..."
            
            # Check for valid keywords
            while IFS= read -r line; do
              # Skip comments and empty lines
              if [[ "$line" =~ ^[[:space:]]*-- ]] || [[ -z "$line" ]]; then
                continue
              fi
              
              # Check if line starts with valid keyword
              if [[ ! "$line" =~ ^(ecoadd|repadd|ecocon)[[:space:]] ]]; then
                echo "❌ Invalid syntax in $file: $line"
                errors=$((errors + 1))
              fi
              
              # Validate repadd format (keyword ecosystem url [tag])
              if [[ "$line" =~ ^repadd[[:space:]] ]]; then
                if [[ ! "$line" =~ ^repadd[[:space:]]+[^[:space:]]+[[:space:]]+https?:// ]]; then
                  echo "❌ Invalid repadd format in $file: $line"
                  errors=$((errors + 1))
                fi
              fi
            done < "$file"
          fi
        done
        
        if [ $errors -gt 0 ]; then
          echo "❌ Found $errors syntax errors"
          exit 1
        fi
        echo "✅ All migration files have valid syntax"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy security scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'